== Welcome to Trip Follower 2.0
It's all new and better than anything you've ever seen.

TODO:

ROADMAP:
	>> Sunday: Flesh =out UI goals and roadmap
	>> Monday: UX/UI/Visualizations
	>> Tuesday: UX/UI/Visualizations
	>> Wednesday: dUX/UI/Visualizations
	>> Thursday: Polish Polish Polish.

*************************

PRESSING:

> PRIVATE feeds -- only query content from each whitelisted user and scrape it for the relevant tag.
  >> Instagram you SUCK... no searching for tags BY a given user
  >> Twitter -- need to retrieve their twitter handle as well to use it as a search term ... which CAN be done to work out properly.
  >> Tumblr also allows you to retrieve posts from a given user with a hashtag
  IMPLEMENTATION
    XXX Test Tumblr manually
    XXX Add a column to the authorizations table for the account name (to use in the search)
    XXX set the create method to populate that column as well
    XXX change feeds to accept the "user_tags_only" boolean for each provider
    XXX code the "user_tags_only" feeds to properly use the user's name in search
    XXX Code a trip's show page to, if private, only use the "user_tags_only" methods and once for each whitelisted user of the trip.
    XXX Sort the (possibly giant) list of content into one ordered feed
      XXXX create a new ordering function?  Errrr later...
    XXX Test the sucker
  >> Unfuck the user's feed page...
    >>> cycle through each trip the user is subscribed to and grab all those yummy api calls
    >>>> Eventually limit the number of trips a user can follow...?


> fix tumblr so it doesn't break for a bad request -- catch it.
> Fix all APIs so they don't break when the user hasn't enabled them.
> Trip feeds on user show pages suck because only one tag gets used for Instagram and Tumblr!

QUESTION: You have a hundred statistics for a given blog post -- a user can follow, thumbs up, thumbs down, smiley face, hate, like, subscribe to... etc
Each of those has its own join table for many-to-many relationships between a user and your post -- a user can of course have tons of those

*************************
Following:
> Concerns!!!!

OPTIMIZATION:
> Have the feed build in realtime using AJAX requests instead of a single-thread server
>

Testing TODOs:
> follower page okay
> following okay
> follower / ing counts okay
> Index page not signed in shows no follow stuff
> Subscriptions Tests:
  >> I automatically subscribe to my trips (but cannot unfollow them)
  >> Admins automatically subscribe to trips for which they are admins (but cannot unsubscribe from them)

Authorization:
>?UJS? trips have admin user(s) added or deleted by the creator
>?UJS?Admins can whitelist non-admin users to post in the trip (if enabled)


OAUTH:
> Now figure out OAuth on top of Devise
> Start prepping for APIs...

APIS: **********************************
> Tumblr
> sort them by their creation date in the feed
> Use embeds instead of just feeds
> Start collecting user login info
>> Instagram
>> Twitter
>> Tumblr

>> Instagram, Twitter, Tumblr, Wordpress, 500px, Pinterest, Flickr

>>>>>>>>>>>>>>>>

*** Instagram:

    CLIENT INFO
    CLIENT ID b50084b45ed94392a160fa31b0e7a488
    CLIENT SECRET 836aa4607ac24b5bb57af76dada1d604
    WEBSITE URL http://127.0.0.1/
    REDIRECT URI  http://127.0.0.1/authorization/instagram
  >> Store in environment files, eg. development/environment.rb
  >> Use ActiveResource???

*** Twitter:
    # Consumer key: QVim65jLuVeoo7phUAP0AQ
    # Consumer Secret: 5tMM645CWOmHwZKcf8xbIVCbRhPHYzMAkmhwvwX7s
    # Request Token URL: https://api.twitter.com/oauth/request_token
    # Authorize URL: https://api.twitter.com/oauth/authorize
    # Access Token URL: https://api.twitter.com/oauth/access_token
    # Callback URL: http://127.0.0.1:3000/authorization/twitter

    # OAuth token: 313316959-gic7hb72LjHqQ1fmE914c1hUuuN51pA3RBzyOA7c
    # OAuth secret: vPhMqtGJOww0QmKrulUjSCpB2yoyxQGWfMQGcTI2knM
  > Use the embedded tweets

*** Tumblr:
    Oauth Consumer Key: aX3GtjNdUNH8Q8ZUBoZ1HbrTBYh9acrIdbWd99qtu1M8RXx2NU
    Secret Key:  pwJVt25o5QlcrV2Wq7TSpaCJhgzmMOR2hzYFpkwosWmcW1jYpE

> The public requests are totally independent of user permissions...
> The feed controller? will need to take in the user, figure out which trips he follows, then request each trip's top items.  It should then aggregate their top items.  ...this is going to be massive and slow but for testing it works.


>> GO PRIVATE
> A User has Accounts
> The application has request ability on behalf of the user
> A refresh request for a private trip pings only associated accounts



Event Pages (Optional -- an "if there's time" accessory):
> Create events models
> Specs
> Integrate events with trips and user pages
> admins can create and edit their own events

Posts: (a temporary testing thing)
> Match posts to trips and events via hashtag

Accessories:
> User profiles
> User photos
> trip photos
> Event photos
> Event locations (lat lng)
> settings: decide whether a trip is whitelist
> typeahead for any user adding
> nest forms for admin and creator control panels??
Users:
> Enable Gravatars for user pictures

Polish:
> CSS the crap out of it
> Admin and creator settings windows should probably be nifty dropdowns instead of full page redirects
> Landing page improvement -- the initial signup should be awesome
> Grey out disabled settings like private post in trip edit form
> Create hover tooltips for the whitelisting
> Typeaheads!
> Make trip whitelisting and admin adds into an ajax form
> On trip edit admin options, make the enter key in the admin textfield add admin instead of submitting the whole form
> Admins should be able to un-admin themselves
> Whitelisted users should be able to un-whitelist themselves
> Paginate trips, users (use gem)
> pluralize everything dynamically (use gem)
>> update subscriber counts and subscribe buttons / unsubscribe buttons in both cases! see trip.js
> Trip hashtag links should display filtered posts
> Hashtag validation -- can't be multiple words and invalid characters
> Let users set their background image.  If not, randomize from my queue of images
> In the authorization page, gray out the logos that have already been authorized
> Refactor the Twitter API call to go back more than 7 days... which will require pulling a "list timeline" of the group of whitelisted users and parsing it for the right hashtag.

Annoyances:
> date fields for trip creation forms


ISSUES:
> Idiomatic enter-to-submit
> When/where to include custom javascripts (organization...), eg. index users page which needs the listeners for the user buttons.


TIL
> The devise after_sign_in_path_for(resource) function returns the path to be redirected to.  The problem is that the stored location is wiped out as soon as it's queried (it's a method) so you need to catch it in another variable to use it.  this function is vulnerable to infinite redirect loops.
> OAuth is a pain in the ass
> JSON.parse is the inverse of .to_json... so getting back a web response you (idiot!) need to use JSON.parse NOT .to_json, which will just escape the characters more times.  Bleh.



Resources:
* Follow buttons :http://www.dreamtemplate.com/dreamcodes/documentation/social_icons.html
* http://www.zurb.com/playground/social-webicons

