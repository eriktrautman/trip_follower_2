== Welcome to Trip Follower 2.0
It's all new and better than anything you've ever seen.

TODO:

ROADMAP:
	>> Tuesday: Following trips, Port to Devise, User Feeds
	>> Wednesday: Set up OmniAuth, Research Instagram, User Feeds
	>> Thursday: Integrate Instagram, Research + Integrate Twitter
	>> Friday: User Feeds, Research + Integrate Tumblr, 500px
	>> Saturday:

*************************

PRESSING:
>> update subscriber counts and subscribe buttons / unsubscribe buttons in both cases! see trip.js
> If I unfollow a user, it should unsubscribe me from all his trips
> If I unsubscribe from a trip, it should ask if I also want to unfollow the user

QUESTION: You have a hundred statistics for a given blog post -- a user can follow, thumbs up, thumbs down, smiley face, hate, like, subscribe to... etc
Each of those has its own join table for many-to-many relationships between a user and your post -- a user can of course have tons of those

*************************
Following:
> Concerns!!!!

Subscriptions:
> Show subscribers next to trips
> Show subscriptions atop trip feed
> Show subscribe/unsubscribe buttons next to trip displays
> Users can subscribe to public trips
> Following someone subscribes to all their trips
> I can unsubscribe from any individual trips
>> It will ask if I want to unfollow the user as well if I unfollow the trip
> I automatically subscribe to my trips (but cannot unfollow them)
> Admins automatically subscribe to trips for which they are admins (but cannot unsubscribe from them)


Testing TODOs:
> follower page okay
> following okay
> follower / ing counts okay
> Index page not signed in shows no follow stuff

Authorization:
>?UJS? trips have admin user(s) added or deleted by the creator
>?UJS?Admins can whitelist non-admin users to post in the trip (if enabled)

Privacy:
> Public view trips are followable (eg all now)

Users:
> Enable Gravatars for user pictures

DEVISE:
> umm... yeah.

Trip Pages:
> Trip hashtag links should display filtered posts

Event Pages:
> Create events models
> Specs
> Integrate events with trips and user pages
> admins can create and edit their own events

Posts: (a temporary testing thing)
> Match posts to trips and events via hashtag

Accessories:
> User profiles
> User photos
> trip photos
> Event photos
> Event locations (lat lng)
> settings: decide whether a trip is whitelist
> typeahead for any user adding
> nest forms for admin and creator control panels??

Annoyances:
> date fields for trip creation forms
> footer that floats

Polish:
> CSS the crap out of it
> Admin and creator settings windows should probably be nifty dropdowns instead of full page redirects
> Landing page improvement -- the initial signup should be awesome
> Grey out disabled settings like private post in trip edit form
> Create hover tooltips for the whitelisting
> Typeaheads!
> Make trip whitelisting and admin adds into an ajax form
> On trip edit admin options, make the enter key in the admin textfield add admin instead of submitting the whole form
> Admins should be able to un-admin themselves
> Whitelisted users should be able to un-whitelist themselves
> Paginate trips, users


ISSUES:
> Idiomatic enter-to-submit
> When/where to include custom javascripts (organization...), eg. index users page which needs the listeners for the user buttons.

> XXX Model calls from edit form?? >> Preload assocs using includes
> XXX Security hole in authorization helper? >> NO, ID is cool BUT eagerly load stuff using includes and it won't fire another model call
> BOOO Couldn't render when not using AJAX for my tripadmins destroy render edit_trip_path(params[:trip_id])
> XXX Working with data- attributes >> Data is a global set of data that html5 camel cases and groups together
> XXX Double firing the radio buttons! >> Labels propagate downwards into the checkbox.... CHANGE button not CLICK button! (keyboard)
> XXX Not disabled public view!
> XXX passing urls to JS using content-tags?  => .to_json script tags
> XXX Unobtrusive Javascript: Hide a real form button if JS is enabled, so non JS users can use the site and I can write regular integration tests... Modernizr -- top HTML tags includes the browser's functionality as classes so you can use CSS to style based on availability of things like JS.

TIL
>>> Factories have an aftercreate method to get around simple annoyances like requiring a current user in order to make the creator of a trip an admin too
>>> To pass data to JS, use the javascript_tag and set the window.varname = '<%= j sample_url %>'; or, better, using content_tag to make a div that just happens to have the data in it
>>> Form_for with nested objects (eg posts comments) just pass array with one of each and it'll infer correctly... also works for link_to
>>> Pass variables to a partial using locals: { var1: val1 } in the render partial call
>>> Security: Using attr_accessible only protects you from a user setting an attribute for which he should not have any way to set it to anything... eg. "admin".  The other flavor is that they shouldn't be able to mess with other types of things that have IDs specified in params or the URLS... these can only be caught using filters like controller before_filters

