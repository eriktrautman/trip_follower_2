== Welcome to Trip Follower 2.0
It's all new and better than anything you've ever seen.

TODO:

ROADMAP:
	>> Wednesday: Port to Devise, Set up OmniAuth, Research Instagram, User Feeds
	>> Thursday: Integrate Instagram, Research + Integrate Twitter
	>> Friday: User Feeds, Research + Integrate Tumblr, 500px
	>> Saturday: Keep integrating APIs
	>> Sunday: Flesh out UI goals and roadmap
	>> Monday: UX/UI/Visualizations
	>> Tuesday: UX/UI/Visualizations
	>> Wednesday: UX/UI/Visualizations
	>> Thursday: Polish Polish Polish.

*************************

PRESSING:


QUESTION: You have a hundred statistics for a given blog post -- a user can follow, thumbs up, thumbs down, smiley face, hate, like, subscribe to... etc
Each of those has its own join table for many-to-many relationships between a user and your post -- a user can of course have tons of those

*************************
Following:
> Concerns!!!!



Testing TODOs:
> follower page okay
> following okay
> follower / ing counts okay
> Index page not signed in shows no follow stuff
> Subscriptions Tests:
  >> I automatically subscribe to my trips (but cannot unfollow them)
  >> Admins automatically subscribe to trips for which they are admins (but cannot unsubscribe from them)

Authorization:
>?UJS? trips have admin user(s) added or deleted by the creator
>?UJS?Admins can whitelist non-admin users to post in the trip (if enabled)

Users:
> Enable Gravatars for user pictures

OAUTH:
> Now figure out OAuth on top of Devise
> Start prepping for APIs...

APIS:
> Research high level to figure out best API to start with (create a list that includes their integratability (eg do they support hashtag-like-features?):
>> Instagram, Twitter, Tumblr, Wordpress, 500px, Pinterest, Flickr

GET CRACKING ON ACTUAL API INTEGRATION!!!
>>>>>>>>>>>>>>>>
> Start with public queries ( so no need yet for user logins and the like ) to the APIs based on hashtags
> Set up 3 APIs (get the application registered)
> Run public hashtag requests
> Store the date of last successful request and only grab newer items
> Pull the content snippets as database items
> Pull these into public trip feeds

*** Instagram:

CLIENT INFO
CLIENT ID	b50084b45ed94392a160fa31b0e7a488
CLIENT SECRET	88ce5753c5024ac19f8038baf2538847
WEBSITE URL	http://127.0.0.1/
REDIRECT URI	http://127.0.0.1/authorization/instagram
>> Store in environment files, eg. development/environment.rb
>> Use ActiveResource???

> The public requests are totally independent of user permissions...
> The feed controller? will need to take in the user, figure out which trips he follows, then request each trip's top items.  It should then aggregate their top items.  ...this is going to be massive and slow but for testing it works.
> FIRST... Just get a single trip's feed working.  So the trip model needs a feed method... which calls a pseudo model for FEED objects? Which then makes the API calls?  WHO MAKES THE API CALLS????

>> GO PRIVATE
> A User has Accounts
> The application has request ability on behalf of the user
> A refresh request for a private trip pings only associated accounts



Event Pages (Optional -- an "if there's time" accessory):
> Create events models
> Specs
> Integrate events with trips and user pages
> admins can create and edit their own events

Posts: (a temporary testing thing)
> Match posts to trips and events via hashtag

Accessories:
> User profiles
> User photos
> trip photos
> Event photos
> Event locations (lat lng)
> settings: decide whether a trip is whitelist
> typeahead for any user adding
> nest forms for admin and creator control panels??

Polish:
> CSS the crap out of it
> Admin and creator settings windows should probably be nifty dropdowns instead of full page redirects
> Landing page improvement -- the initial signup should be awesome
> Grey out disabled settings like private post in trip edit form
> Create hover tooltips for the whitelisting
> Typeaheads!
> Make trip whitelisting and admin adds into an ajax form
> On trip edit admin options, make the enter key in the admin textfield add admin instead of submitting the whole form
> Admins should be able to un-admin themselves
> Whitelisted users should be able to un-whitelist themselves
> Paginate trips, users (use gem)
> pluralize everything dynamically (use gem)
>> update subscriber counts and subscribe buttons / unsubscribe buttons in both cases! see trip.js
> Trip hashtag links should display filtered posts

Annoyances:
> date fields for trip creation forms


ISSUES:
> Idiomatic enter-to-submit
> When/where to include custom javascripts (organization...), eg. index users page which needs the listeners for the user buttons.


TIL


